/**
 * 複合条件（デシジョンテーブルテスト）
 *
 * ### 例： コンテナ積載可否の判断ルール
 * - 貨物の特性（爆発性、揮発性、一般）によって、その貨物を積載できるコンテナ種類が異なる
 * - テスト仕様として、デシジョンテーブル（決定表）形式で表現されることが多い
 *
 * ### デシジョンテーブル
 * |パターン|１|２|3|4|5|6|7|8|9|10|11|12|
 * |---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
 * |**条件**|||||||||||||
 * |貨物の特性|爆発性|爆発性|爆発性|爆発性|揮発性|揮発性|揮発性|揮発性|一般|一般|一般|一般|
 * |コンテナの機能|強化|強化<br>かつ<br>換気|換気|標準|強化|強化<br>かつ<br>換気|換気|標準|強化|強化<br>かつ<br>換気|換気|標準|
 * |**判定**|||||||||||||
 * |積載可能|○|○|×|×|×|○|○|×|×|×|×|○|
 *
 * ### 設計メモ
 * - 条件を列挙型(enum)で宣言
 *   - コンテナ機能を列挙
 *   - 貨物の特性を列挙
 *   - 貨物の特性ごとに必要なコンテナ機能を定義
 * - 判断ロジックを条件分岐（if文やswitch文)を使わずに表現
 *   - コンテナが必要な機能を持つかどうかの判断ロジックを引数1の述語（boolean型の関数）Predict#test(target)で表現
 *   - Set#contains()で判定
 * - @ParameterisedTestの@MethodSourceで、決定表をコード(Stream&lt;Arguments&gt;)として表現
 *
 */
package com.example.domain.model.patterns.advanced.predicate;